plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

mainClassName = 'Main'

repositories {
    mavenCentral()
}

// Toggle RC-only resolution with either:
//  -PcoreTag=rc
// or
//  RELEASE_TAG=rc
def rcOnly = (
    (findProperty('coreTag') ?: findProperty('CORE_TAG') ?: System.getenv('RELEASE_TAG')) == 'rc'
)

configurations.all { cfg ->
    resolutionStrategy {
        componentSelection {
            all { ComponentSelection selection ->
                if (!rcOnly) {
                    return
                }

                def candidate = selection.candidate
                // Only gate RC selection for javacore
                def isStatsigTarget = candidate.group == 'com.statsig' && candidate.module == 'javacore'
                if (!isStatsigTarget) {
                    return
                }

                def v = candidate.version ?: ''
                def isRc = (v ==~ /(?i).*[\.-]rc([\.-]?\d+)?([\.-].*)?$/)
                if (!isRc) {
                    selection.reject('rc-only mode: rejecting non-rc version')
                }
            }
        }
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    withSourcesJar()
}

dependencies {
    implementation 'com.statsig:serversdk:+'
    implementation 'com.statsig:javacore:+'
    implementation 'com.alibaba.fastjson2:fastjson2:2.0.41'
    implementation 'io.javalin:javalin:+'
    implementation 'org.slf4j:slf4j-simple:+'

    implementation 'com.statsig:javacore:+:x86_64-unknown-linux-gnu'
    implementation 'com.statsig:javacore:+:aarch64-unknown-linux-gnu'
    implementation 'com.statsig:javacore:+:aarch64-apple-darwin'
}


tasks.register('write_versions') {
    def versionsFile = file("$buildDir/versions.properties")
    versionsFile.parentFile.mkdirs()

    def props = new Properties()

    configurations.runtimeClasspath.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        if (artifact.moduleVersion.id.group == 'com.statsig' && artifact.moduleVersion.id.name == 'javacore') {
            props.setProperty('core.version', artifact.moduleVersion.id.version)
        }

        if (artifact.moduleVersion.id.group == 'com.statsig' && artifact.moduleVersion.id.name == 'serversdk') {
            props.setProperty('legacy.version', artifact.moduleVersion.id.version)
        }
    }

    versionsFile.withWriter { writer ->
        props.store(writer, 'Dependency versions')
    }
}

sourceSets {
    main {
        java {
            srcDirs = ['.']
        }
    }
}

java {
    withSourcesJar()
}

tasks.withType(Jar).configureEach {
    dependsOn write_versions
    manifest {
        attributes 'Main-Class': 'Main'
    }
}